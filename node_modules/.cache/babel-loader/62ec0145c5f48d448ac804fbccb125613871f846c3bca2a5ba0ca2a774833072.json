{"ast":null,"code":"import { createStore } from 'vuex';\n\n// 实现本地存储\nconst setLocalCartList = state => {\n  const {\n    cartList\n  } = state;\n  const cartListString = JSON.stringify(cartList);\n  localStorage.cartList = cartListString;\n};\nconst getLocalCartList = () => {\n  try {\n    return JSON.parse(localStorage.cartList) || {};\n  } catch (e) {\n    return {};\n  }\n};\nexport default createStore({\n  state: {\n    // cartList:{\n    //   shopId:{\n    //     shopNme:'沃尔玛',\n    //     productList:{\n    //        productId:{\n    //          _id: \"1\",\n    //          name: \"番茄 250g / 份\",\n    //          imgUrl: \"http://www.dell-lee.com/imgs/vue3/tomato.png\",\n    //          sales: 10,\n    //          price: 33.6,\n    //          oldPrice: 39.6,\n    //          count:2\n    //        }\n    //     }\n    // }\n    // cartList:{}\n    cartList: getLocalCartList()\n  },\n  getters: {},\n  mutations: {\n    // 响应外部事件 state即上面的存储的数据，payload即外部进来的数据\n    changeCartItemInfo(state, payload) {\n      const {\n        shopId /* 商家 */,\n        productId /* 产品 */,\n        productInfo /* 产品详情 */\n      } = payload;\n\n      // 拿到state中 对应入参商家id的 产品列表\n      const shopInfo = state.cartList[shopId] || {\n        shopName: '',\n        productList: {}\n      };\n      // // 判空处理\n      // if (!shopInfo) { shopInfo = {} }\n\n      // 根据入参productId 获取 state对应列表中 对应的产品\n      let product = shopInfo?.productList[productId];\n      // 判空处理\n      if (!product) {\n        // 如果是第一次加这个产品数据，则把 入参产品详情 加入state 设置 count为 0\n        product = productInfo;\n        product.count = 0;\n      }\n      product.count = product.count + payload.num;\n      if (payload.num > 0) {\n        product.check = true;\n      } // 一个item如果被添加，默认置为true\n      if (product.count < 0) {\n        product.count = 0;\n      } // 防止负数\n      shopInfo.productList[productId] = product;\n      state.cartList[shopId] = shopInfo;\n      setLocalCartList(state);\n      // 整个思路就是\n      // 根据 入参id，一步步取 商家产品列表、取产品,\n      // 商家产品列表为空，则初始空对象， 产品取得为空，则 把 入参 产品详情 加给state取出的这个 产品空对象，\n      // 最后 给state 对应的产品 的数据 递增count，\n      // 把产品设置回商家所取列表，把 商家设置回 state\n\n      console.log('store/index.js mutations changeCartItemInfo --- ', '\\nshopId --- ', shopId, '\\nproductId --- ', productId, '\\nproductInfo --- ', productInfo);\n      console.log('store/index.js mutations changeCartItemInfo  --- ', '\\nstate.cartList[shopId] --- ', state.cartList[shopId], '\\nstate.cartList[shopId]?.productList[productId] --- ', state.cartList[shopId]?.productList[productId], '\\nstate.cartList[shopId]?.productList[productId].count --- ', state.cartList[shopId]?.productList[productId].count);\n    },\n    changeShopName(state, payload) {\n      const {\n        shopId,\n        shopName\n      } = payload;\n      // 取出商家信息数据，若为空，则初始为空\n      const shopInfo = state.cartList[shopId] || {\n        shopName: '',\n        productList: {}\n      };\n      // 商家信息数据 拿到后，赋值商家名称，置回\n      shopInfo.shopName = shopName;\n      state.cartList[shopId] = shopInfo;\n      setLocalCartList(state);\n    },\n    // 更改 购物车内容Item的 选中状态\n    changeCartItemChecked(state, payload) {\n      const {\n        shopId,\n        productId\n      } = payload;\n      // 因为这里必定是UI存在 才能点击跳转到此，UI存在则其双向绑定数据必定存在\n      const product = state.cartList[shopId]?.productList[productId];\n      product.check = !product.check;\n      setLocalCartList(state);\n    },\n    // 清空购物车（产品列表）\n    cleanCartProducts(state, payload) {\n      console.log('store --- cleanCartProducts ---');\n      const {\n        shopId\n      } = payload;\n      state.cartList[shopId].productList = {};\n      setLocalCartList(state);\n    },\n    // 全选按钮\n    setCartItemsChecked(state, payload) {\n      const {\n        shopId\n      } = payload;\n      const products = state.cartList[shopId]?.productList;\n      if (products) {\n        // 循环 对应产品列表，全部设置为选中\n        for (const key in products) {\n          const product = products[key];\n          product.check = true;\n        }\n      }\n      setLocalCartList(state);\n    }\n  },\n  actions: {},\n  modules: {}\n});","map":{"version":3,"names":["createStore","setLocalCartList","state","cartList","cartListString","JSON","stringify","localStorage","getLocalCartList","parse","e","getters","mutations","changeCartItemInfo","payload","shopId","productId","productInfo","shopInfo","shopName","productList","product","count","num","check","console","log","changeShopName","changeCartItemChecked","cleanCartProducts","setCartItemsChecked","products","key","actions","modules"],"sources":["D:/VsSpace/vue/jingdong/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\n\n// 实现本地存储\nconst setLocalCartList = (state) => {\n  const { cartList } = state\n  const cartListString = JSON.stringify(cartList)\n  localStorage.cartList = cartListString\n}\nconst getLocalCartList = ()=>{\n  try {\n    return JSON.parse(localStorage.cartList) || {}\n  } catch (e) {\n    return {}\n  }\n}\nexport default createStore({\n  state: {\n  // cartList:{\n    //   shopId:{\n    //     shopNme:'沃尔玛',\n    //     productList:{\n    //        productId:{\n    //          _id: \"1\",\n    //          name: \"番茄 250g / 份\",\n    //          imgUrl: \"http://www.dell-lee.com/imgs/vue3/tomato.png\",\n    //          sales: 10,\n    //          price: 33.6,\n    //          oldPrice: 39.6,\n    //          count:2\n    //        }\n    //     }\n    // }\n    // cartList:{}\n    cartList: getLocalCartList()\n  },\n  getters: {\n  },\n  mutations: {\n    // 响应外部事件 state即上面的存储的数据，payload即外部进来的数据\n    changeCartItemInfo (state, payload) {\n      const { shopId/* 商家 */, productId /* 产品 */, productInfo /* 产品详情 */ } = payload\n\n      // 拿到state中 对应入参商家id的 产品列表\n      const shopInfo = state.cartList[shopId] || {\n        shopName: '', productList: {}\n      }\n      // // 判空处理\n      // if (!shopInfo) { shopInfo = {} }\n\n      // 根据入参productId 获取 state对应列表中 对应的产品\n      let product = shopInfo?.productList[productId]\n      // 判空处理\n      if (!product) {\n        // 如果是第一次加这个产品数据，则把 入参产品详情 加入state 设置 count为 0\n        product = productInfo\n        product.count = 0\n      }\n      product.count = product.count + payload.num\n      if (payload.num > 0) { product.check = true } // 一个item如果被添加，默认置为true\n      if (product.count < 0) { product.count = 0 } // 防止负数\n      shopInfo.productList[productId] = product\n      state.cartList[shopId] = shopInfo\n      setLocalCartList(state)\n      // 整个思路就是\n      // 根据 入参id，一步步取 商家产品列表、取产品,\n      // 商家产品列表为空，则初始空对象， 产品取得为空，则 把 入参 产品详情 加给state取出的这个 产品空对象，\n      // 最后 给state 对应的产品 的数据 递增count，\n      // 把产品设置回商家所取列表，把 商家设置回 state\n\n      console.log('store/index.js mutations changeCartItemInfo --- ',\n        '\\nshopId --- ', shopId,\n        '\\nproductId --- ', productId,\n        '\\nproductInfo --- ', productInfo)\n      console.log('store/index.js mutations changeCartItemInfo  --- ',\n        '\\nstate.cartList[shopId] --- ', state.cartList[shopId],\n        '\\nstate.cartList[shopId]?.productList[productId] --- ', state.cartList[shopId]?.productList[productId],\n        '\\nstate.cartList[shopId]?.productList[productId].count --- ', state.cartList[shopId]?.productList[productId].count)\n    },\n\n    changeShopName (state, payload) {\n      const { shopId, shopName } = payload\n      // 取出商家信息数据，若为空，则初始为空\n      const shopInfo = state.cartList[shopId] || {\n        shopName: '', productList: {}\n      }\n      // 商家信息数据 拿到后，赋值商家名称，置回\n      shopInfo.shopName = shopName\n      state.cartList[shopId] = shopInfo\n      setLocalCartList(state)\n    },\n\n    // 更改 购物车内容Item的 选中状态\n    changeCartItemChecked (state, payload) {\n      const { shopId, productId } = payload\n      // 因为这里必定是UI存在 才能点击跳转到此，UI存在则其双向绑定数据必定存在\n      const product = state.cartList[shopId]?.productList[productId]\n      product.check = !product.check\n      setLocalCartList(state)\n    },\n\n    // 清空购物车（产品列表）\n    cleanCartProducts (state, payload) {\n      console.log('store --- cleanCartProducts ---')\n      const { shopId } = payload\n      state.cartList[shopId].productList = {}\n      setLocalCartList(state)\n    },\n\n    // 全选按钮\n    setCartItemsChecked (state, payload) {\n      const { shopId } = payload\n      const products = state.cartList[shopId]?.productList\n      if (products) {\n        // 循环 对应产品列表，全部设置为选中\n        for (const key in products) {\n          const product = products[key]\n          product.check = true\n        }\n      }\n      setLocalCartList(state)\n    }\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}